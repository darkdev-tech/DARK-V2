const axios = require("axios");
const { zokou } = require("../framework/zokou");
const traduire = require("../framework/traduction");
const { Sticker, StickerTypes } = require('wa-sticker-formatter');

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äé RANDOM ANIME „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
zokou({
  nomCom: "anime",
  categorie: "Fun",
  reaction: "üì∫"
}, async (origineMessage, zk, { repondre, ms }) => {
  const jsonURL = "https://api.jikan.moe/v4/random/anime";
  try {
    const { data } = await axios.get(jsonURL);
    const anime = data.data;

    const caption = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê„Äé *ùóîùó°ùóúùó†ùóò ùó¶ùó£ùó¢ùóß* „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
üì∫ *Title:* ${anime.title}
üé¨ *Episodes:* ${anime.episodes || "Unknown"}
üì° *Status:* ${anime.status}
üìù *Synopsis:* ${anime.synopsis || "No synopsis available."}
üîó *More Info:* ${anime.url}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;

    zk.sendMessage(origineMessage, {
      image: { url: anime.images.jpg.image_url },
      caption,
    }, { quoted: ms });
  } catch (err) {
    console.error(err);
    repondre("‚ö†Ô∏è Oops! Failed to fetch anime info. Try again later.");
  }
});

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äé GOOGLE SEARCH „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
zokou({
  nomCom: "google",
  categorie: "Search"
}, async (dest, zk, { arg, repondre }) => {
  if (!arg[0]) return repondre("üîç Provide a search query like: .google What is AI?");

  const google = require('google-it');
  try {
    const results = await google({ query: arg.join(" ") });
    let msg = `üîç *Google Results for:* _${arg.join(" ")}_\n\n`;

    results.slice(0, 5).forEach(result => {
      msg += `‚û§ *${result.title}*\n${result.snippet}\nüåê ${result.link}\n\n`;
    });

    repondre(msg.trim());
  } catch (err) {
    repondre("‚ö†Ô∏è Something went wrong while searching Google.");
  }
});

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äé IMDB SEARCH „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
zokou({
  nomCom: "imdb",
  categorie: "Search"
}, async (dest, zk, { arg, repondre, ms }) => {
  if (!arg[0]) return repondre("üé¨ Please provide a movie name like: .imdb The Matrix");

  try {
    const { data } = await axios.get(`http://www.omdbapi.com/?apikey=742b2d09&t=${arg.join(" ")}&plot=full`);
    if (!data || data.Response === "False") return repondre("‚ùå Movie not found!");

    const caption = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê„Äé *IMDB DETAILS* „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
üé¨ *Title:* ${data.Title}
üìÜ *Year:* ${data.Year}
‚≠ê *Rated:* ${data.Rated}
üïí *Runtime:* ${data.Runtime}
üåê *Language:* ${data.Language}
üåÄ *Genre:* ${data.Genre}
üé• *Director:* ${data.Director}
üë• *Actors:* ${data.Actors}
üìù *Plot:* ${data.Plot}
üèÜ *Awards:* ${data.Awards}
üì¶ *Box Office:* ${data.BoxOffice}
üîó *IMDB Rating:* ${data.imdbRating} (${data.imdbVotes} votes)
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;

    zk.sendMessage(dest, { image: { url: data.Poster }, caption }, { quoted: ms });
  } catch (err) {
    repondre("‚ö†Ô∏è Error fetching IMDB data.");
  }
});

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äé MOVIE SEARCH „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
zokou({
  nomCom: "movie",
  categorie: "Search"
}, async (dest, zk, { arg, repondre, ms }) => {
  if (!arg[0]) return repondre("üé• Please provide a movie/series name like: .movie John Wick");

  try {
    const { data } = await axios.get(`http://www.omdbapi.com/?apikey=742b2d09&t=${arg.join(" ")}&plot=full`);
    if (!data || data.Response === "False") return repondre("‚ùå Movie not found!");

    const caption = `üîó *Download Movies From Telegram:* https://t.me/moviebox_free_movie_download

üé¨ *Title:* ${data.Title}
üìÖ *Year:* ${data.Year}
‚≠ê *Rated:* ${data.Rated}
üìÜ *Released:* ${data.Released}
‚è≥ *Runtime:* ${data.Runtime}
üåÄ *Genre:* ${data.Genre}
üë®üèª‚Äçüíª *Director:* ${data.Director}
‚úç *Writers:* ${data.Writer}
üë® *Actors:* ${data.Actors}
üìÉ *Plot:* ${data.Plot}
üåê *Language:* ${data.Language}
üåç *Country:* ${data.Country}
üéñÔ∏è *Awards:* ${data.Awards}
üì¶ *Box Office:* ${data.BoxOffice}
üèôÔ∏è *Production:* ${data.Production}
üåü *Rating:* ${data.imdbRating}
‚ùé *Votes:* ${data.imdbVotes}`;

    zk.sendMessage(dest, { image: { url: data.Poster }, caption }, { quoted: ms });
  } catch (err) {
    repondre("‚ö†Ô∏è Error fetching movie details.");
  }
});

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äé EMOJI MIX „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
zokou({
  nomCom: "emojimix",
  categorie: "Conversion"
}, async (dest, zk, { arg, repondre, ms, nomAuteurMessage }) => {
  if (!arg[0] || !arg[0].includes(";")) return repondre("üí° Use it like: .emojimix üòÄ;ü•∞");

  const [emoji1, emoji2] = arg.join(" ").split(";").map(e => e.trim());

  try {
    const res = await axios.get(`https://levanter.onrender.com/emix?q=${emoji1}${emoji2}`);

    if (res.data.status) {
      const sticker = new Sticker(res.data.result, {
        pack: nomAuteurMessage,
        type: StickerTypes.CROPPED,
        quality: 70,
        background: "transparent",
      });

      const buffer = await sticker.toBuffer();
      zk.sendMessage(dest, { sticker: buffer }, { quoted: ms });
    } else {
      repondre("‚ùå Couldn‚Äôt mix those emojis. Try different ones!");
    }
  } catch (err) {
    repondre(`‚ö†Ô∏è Error mixing emojis: ${err.message}`);
  }
});
